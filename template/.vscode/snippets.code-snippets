{
  // General
  "Add TODO": {
    "description": "Create a comment with a TODO",
    "prefix": "todo",
    "body": ["$BLOCK_COMMENT_START @TODO ${1:todo} $BLOCK_COMMENT_END"]
  },
  // Markup-related
  "Classy element": {
    "scope": "svelte",
    "description": "Create an element with an attached class",
    "prefix": "elClass",
    "body": ["<${1:div} class=\"${2:class}\">", "\t${0}", "</${1}>"]
  },
  // Schemas with sanity
  "Sanity Object": {
    "scope": "javascript",
    "description": "Create a simple object for the CMS",
    "prefix": "sanityObj",
    "body": [
      "export default {",
      "\tname: '${1:$TM_FILENAME_BASE}',",
      "\ttitle: '${2:$TM_FILENAME_BASE}',",
      "\ttype: '${3|object,document|}',",
      "\tfields: [",
      "\t\t{",
      "\t\t\tname: 'title',",
      "\t\t\ttitle: 'Title',",
      "\t\t\ttype: 'string',",
      "\t\t}",
      "\t],",
      "}"
    ]
  },
  "Sanity Fieldset": {
    "scope": "javascript",
    "description": "Add fieldsets to a sanity object / document",
    "prefix": "sanityFieldset",
    "body": [
      "fieldsets: [",
      "\t{",
      "\t\tname: '${1:name}',",
      "\t\ttitle: '${2:title}',",
      "\t\t${0:options: { collapsible: true, collapsed: true }},",
      "\t},",
      "],"
    ]
  },
  "Sanity Field": {
    "scope": "javascript",
    "description": "Add a field to a sanity object / document",
    "prefix": "sanityFld",
    "body": [
      "{",
      "\tname: '${1:name}',",
      "\ttitle: '${2:title}',",
      "\ttype: '${3:type}',",
      "},"
    ]
  },
  "Sanity Optional": {
    "scope": "javascript",
    "description": "Add a cue that a field is optional",
    "prefix": "sanityOptional",
    "body": ["description: '${1:‚ùì Campo opcional}${0}',"]
  },
  "Sanity Optional Encouraged": {
    "scope": "javascript",
    "description": "Add a cue that a field is optional, but encourage writing it",
    "prefix": "sanityOptionalEncouraged",
    "body": [
      "description: '${1:‚ö° Campo opcional mas altamente encorajado}${0}',"
    ]
  },
  "Sanity Required": {
    "scope": "javascript",
    "description": "Make a given field required",
    "prefix": "sanityRequired",
    "body": ["validation: validation.default(),"]
  },
  "Sanity Collapse Field": {
    "scope": "javascript",
    "description": "Make a given field required",
    "prefix": "sanityCollapse",
    "body": ["options: { collapsible: true, ${0:collapsed: true,}},"]
  },
  "Sanity Array Validation (length)": {
    "scope": "javascript",
    "description": "Validate an array field based on its length",
    "prefix": "sanityArrValidation",
    "body": [
      "validation: Rule =>",
      "\tRule.required()",
      "\t\t.min(${1:1})",
      "\t\t.max(${2:2})",
      "\t\t.${4:error}('${0}Com obrigat√≥rio com no m√≠nimo ${1:1} e m√°ximo de ${2:2} ${3:entradas}.'),"
    ]
  },
  "Sanity Description": {
    "scope": "javascript",
    "description": "Add a description to a field, document or object",
    "prefix": "sanityDesc",
    "body": ["description: '${1:description}',"]
  },
  "Sanity Tip": {
    "scope": "javascript",
    "description": "Add a tip as a field's description",
    "prefix": "sanityTip",
    "body": ["description: 'üí° ${1:tip here}',"]
  },
  "Sanity Basic Array": {
    "scope": "javascript",
    "description": "Create a basic array field in Sanity",
    "prefix": "sanityArrFld",
    "body": [
      "{",
      "\tname: '${1:name}',",
      "\ttitle: '${2:title}',",
      "\ttype: 'array',",
      "\tof: [{ type: 'string' }],",
      "},"
    ]
  },
  "Sanity schema icon import": {
    "scope": "javascript",
    "description": "Import an icon from react-icons to use as a doc/obj's icon",
    "prefix": "sanityIcon",
    "body": ["import { ${1:FiSomething} as icon } from 'react-icons/fi'"]
  },
  // Style-related
  "Add property + PostCSS variable": {
    "scope": "sass,postcss",
    "description": "Add a property with a value corresponding to a pre-compiled variable",
    "prefix": "var",
    "body": ["${1:property}: $${2:varName}"]
  },
  "Grid": {
    "scope": "sass,postcss",
    "description": "Display grid + justify-content, align-items and grid-gap set to what you want",
    "prefix": "grid",
    "body": [
      "display: grid",
      "justify-content: ${1:center}",
      "align-items: ${2:center}",
      "grid-gap: ${3:0}"
    ]
  },
  "Grid structure": {
    "scope": "sass,postcss",
    "description": "Set how the grid should behave",
    "prefix": "gridStructure",
    "body": [
      "grid-template-${1:columns}: repeat(${2:auto-fit}, minmax(${3:280px}, ${4:450px}))",
      "grid-gap: ${5:0}"
    ]
  },
  "Flex": {
    "scope": "sass,postcss",
    "description": "Display flex + justify-content, align-items and flex-wrap set to what you want",
    "prefix": "flex",
    "body": [
      "display: flex",
      "justify-content: ${1:center}",
      "align-items: ${2:center}",
      "${0:flex-wrap: wrap}"
    ]
  },
  "Flex Wrap": {
    "scope": "sass,postcss",
    "description": "flex-wrap: wrap",
    "prefix": "flexWrap",
    "body": ["flex-wrap: ${1:wrap}"]
  },
  "Circle": {
    "scope": "sass,postcss",
    "description": "Create a circle with fixed width and height",
    "prefix": "circle",
    "body": [
      "border-radius: 50%",
      "width: ${1:1em}",
      "height: ${1:1em}",
      "font-size: ${2:1em}"
    ]
  },
  "Absolute cover": {
    "scope": "sass,postcss",
    "description": "Set an element to cover its relative parent container",
    "prefix": "absCover",
    "body": [
      "position: ${1:absolute}",
      "width: 100%",
      "height: 100%",
      "top: 0",
      "left: 0",
      "${0:object-fit: cover}"
    ]
  },
  "Absolute position": {
    "scope": "sass,postcss",
    "description": "Position through position: absolute",
    "prefix": "absPos",
    "body": [
      "position: ${1:absolute}",
      "top: ${2:50%}",
      "left: ${3:50%}",
      "transform: ${4:translate(-50%,-50%)}"
    ]
  },
  "Relative Index": {
    "scope": "sass,postcss",
    "description": "Relative position the element and set its z-index",
    "prefix": "relIndex",
    "body": ["position: ${1:relative}", "z-index: ${2:1}"]
  },
  "Border": {
    "scope": "sass,postcss",
    "description": "Regular border",
    "prefix": "border",
    "body": ["border: ${1:1px} ${2:solid} ${3:$color}"]
  },
  "Media query": {
    "scope": "sass,postcss",
    "description": "Create media query definitions",
    "prefix": "mediaQuery",
    "body": ["@media (${1:$$tabletUp})", "\t${2::root}", "\t\t${0}"]
  },
  "Center Container": {
    "scope": "sass,postcss",
    "description": "Set a max width for a container and center it in its parent",
    "prefix": "centerContainer",
    "body": ["max-width: ${1:600px}", "margin: ${2:2em} ${3:auto}"]
  },
  "Same width and height": {
    "scope": "sass,postcss",
    "description": "Set the same value for width and height",
    "prefix": "widthHeight",
    "body": ["width: ${1:1em}", "height: ${1}"]
  },
  "Get size in rems": {
    "scope": "sass",
    "description": "Use the getRem function to transform pixels to rems",
    "prefix": "getRem",
    "body": ["getRem(${1:10})"]
  },
  // Svelte
  "Svelte conditional": {
    "scope": "svelte",
    "description": "If block in Svelte",
    "prefix": "if",
    "body": ["{#if ${1:cond}}", "\t${2}", "{/if}"]
  },
  "Svelte conditional with else": {
    "scope": "svelte",
    "description": "If/else block in Svelte",
    "prefix": "ifElse",
    "body": ["{#if ${1:cond}}", "\t${2}", "{:else}", "\t${3}", "{/if}"]
  },
  "Svelte loop": {
    "scope": "svelte",
    "description": "Each block in Svelte",
    "prefix": "each",
    "body": ["{#each ${1:array} as ${2:item}}", "\t${3}", "{/each}"]
  }
}
